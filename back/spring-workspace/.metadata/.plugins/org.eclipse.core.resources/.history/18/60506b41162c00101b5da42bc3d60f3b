package tn.itbs.maintenanceapp.controller;

import jakarta.validation.Valid;
import tn.itbs.maintenanceapp.bean.Competence;
import tn.itbs.maintenanceapp.bean.Technicien;
import tn.itbs.maintenanceapp.service.TechnicienService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/technicien")
public class TechnicienController {

    private static final Logger logger = LoggerFactory.getLogger(TechnicienController.class);
    private final TechnicienService technicienService;

    @Autowired
    public TechnicienController(TechnicienService technicienService) {
        this.technicienService = technicienService;
    }

    @GetMapping
    public ResponseEntity<List<Technicien>> getAllTechnicians() {
        List<Technicien> techniciens = technicienService.getAllTechniciens();
        return ResponseEntity.ok(techniciens);
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getTechnicianById(@PathVariable Long id) {
        Optional<Technicien> technicienOpt = technicienService.getTechnicienById(id);
        if (technicienOpt.isPresent()) {
            return ResponseEntity.ok(technicienOpt.get());
        } else {
            logger.warn("Technicien non trouvé avec l'id {}", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Technicien non trouvé.");
        }
    }

    @PostMapping
    public ResponseEntity<?> saveTechnician(@Valid @RequestBody Technicien technicien) {
        try {
            if (technicien.getCompetence() != null && !technicien.getCompetence().isEmpty()) {
                for (Competence competence : technicien.getCompetence()) {
                    if (competence.getId() == null) {
                        technicienService.saveCompetence(competence);
                    }
                }
            }

            Technicien savedTechnicien = technicienService.saveTechnicien(technicien);
            return ResponseEntity.status(HttpStatus.CREATED).body(savedTechnicien);
        } catch (Exception e) {
            logger.error("Erreur lors de l'enregistrement du technicien : {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Impossible d'enregistrer le technicien.");
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteTechnician(@PathVariable("id") Long id) {
        if (!technicienService.technicienExists(id)) {
            logger.warn("Tentative de suppression d’un technicien inexistant avec l'id {}", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Technicien non trouvé.");
        }
        try {
            technicienService.deleteTechnicien(id);
            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
        } catch (Exception e) {
            logger.error("Erreur lors de la suppression du technicien avec l'id {} : {}", id, e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Impossible de supprimer le technicien.");
        }
    }

    @GetMapping("/uuid/{uuid}")
    public ResponseEntity<?> getTechnicianByUuid(@PathVariable UUID uuid) {
        try {
            Technicien technicien = technicienService.getTechnicienByUuid(uuid);
            return technicien != null
                    ? ResponseEntity.ok(technicien)
                    : ResponseEntity.status(HttpStatus.NOT_FOUND).body("Technicien non trouvé.");
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération du technicien par UUID {} : {}", uuid, e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erreur lors de la récupération.");
        }
    }

    @PostMapping("/competence")
    public ResponseEntity<List<Technicien>> findByCompetences(@RequestBody List<Competence> competences) {
        return ResponseEntity.ok(technicienService.findTechniciensByCompetences(competences));
    }

    @GetMapping("/available")
    public ResponseEntity<List<Technicien>> getAvailableTechnicians() {
        return ResponseEntity.ok(technicienService.getAvailableTechniciens());
    }

    @GetMapping("/name/{name}")
    public ResponseEntity<?> getTechnicianByName(@PathVariable String name) {
        Technicien technicien = technicienService.getTechnicienByName(name);
        return technicien != null
                ? ResponseEntity.ok(technicien)
                : ResponseEntity.status(HttpStatus.NOT_FOUND).body("Technicien non trouvé.");
    }
}
