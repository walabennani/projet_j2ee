package tn.itbs.maintenanceapp.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jakarta.validation.Valid;
import tn.itbs.maintenanceapp.bean.Equipement;
import tn.itbs.maintenanceapp.service.EquipementService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/equipement")
@CrossOrigin(origins = "http://localhost:4200") // autorise Angular
public class EquipementController {

    private static final Logger logger = LoggerFactory.getLogger(EquipementController.class);

    private final EquipementService equipementService;

    @Autowired
    public EquipementController(EquipementService equipementService) {
        this.equipementService = equipementService;
    }

    // Récupérer tous les équipements
    @GetMapping
    public ResponseEntity<List<Equipement>> getAllEquipement() {
        try {
            List<Equipement> equipementList = equipementService.getAllEquipement();
            return equipementList.isEmpty() 
                ? ResponseEntity.noContent().build() 
                : ResponseEntity.ok(equipementList);
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération des équipements", e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Récupérer un équipement par ID
    @GetMapping("/{id}")
    public ResponseEntity<Equipement> getEquipementById(@PathVariable Long id) {
        try {
            Optional<Equipement> equipement = equipementService.getEquipementById(id);
            return equipement.map(ResponseEntity::ok)
                             .orElseGet(() -> ResponseEntity.notFound().build());
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération de l'équipement ID: {}", id, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Créer un nouvel équipement
    @PostMapping
    public ResponseEntity<Equipement> createEquipement(@Valid @RequestBody Equipement equipement) {
        try {
            Equipement savedEquipement = equipementService.saveEquipement(equipement);
            return ResponseEntity.status(HttpStatus.CREATED).body(savedEquipement);
        } catch (Exception e) {
            logger.error("Erreur lors de la création de l'équipement", e);
            return ResponseEntity.badRequest().build();
        }
    }

    // Supprimer un équipement
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEquipement(@PathVariable ("id") Long id){
        try {
            if (!equipementService.getEquipementById(id).isPresent()) {
                return ResponseEntity.notFound().build();
            }
            equipementService.deleteEquipement(id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            logger.error("Erreur lors de la suppression de l'équipement ID: {}", id, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Rechercher des équipements par nom
    @GetMapping("/search")
    public ResponseEntity<List<Equipement>> searchEquipement(@RequestParam String nom) {
        try {
            List<Equipement> resultats = equipementService.searchEquipementByName(nom);
            return resultats.isEmpty() 
                ? ResponseEntity.noContent().build() 
                : ResponseEntity.ok(resultats);
        } catch (Exception e) {
            logger.error("Erreur lors de la recherche d'équipements par nom: {}", nom, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Gestion des erreurs de validation
    @ExceptionHandler(BindException.class)
    public ResponseEntity<String> handleValidationExceptions(BindException ex) {
        StringBuilder errors = new StringBuilder("Erreurs de validation :\n");
        ex.getFieldErrors().forEach(error -> 
            errors.append(error.getField())
                  .append(" : ")
                  .append(error.getDefaultMessage())
                  .append("\n"));
        logger.error(errors.toString());
        return ResponseEntity.badRequest().body(errors.toString());
    }

    // Gestion des erreurs générales
    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleGeneralException(Exception e) {
        logger.error("Erreur interne du serveur", e);
        return ResponseEntity.internalServerError()
                             .body("Une erreur inattendue est survenue : " + e.getMessage());
    }
}