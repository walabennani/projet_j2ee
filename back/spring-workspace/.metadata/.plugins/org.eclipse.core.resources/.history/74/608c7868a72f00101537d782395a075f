package tn.itbs.maintenanceapp.controller;

import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.BindException;
import tn.itbs.maintenanceapp.bean.Intervention;
import tn.itbs.maintenanceapp.service.InterventionService;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@RestController
@RequestMapping("/api/intervention")
public class InterventionController {

    private static final Logger logger = LoggerFactory.getLogger(InterventionController.class);

    private final InterventionService interventionService;

    @Autowired
    public InterventionController(InterventionService interventionService) {
        this.interventionService = interventionService;
    }

    // Ajouter une intervention
    @PostMapping
    public ResponseEntity<?> createIntervention(@Valid @RequestBody Intervention intervention) {
        try {
            Intervention saved = interventionService.saveIntervention(intervention);
            return ResponseEntity.status(HttpStatus.CREATED).body(saved);
        } catch (IllegalArgumentException e) {
            logger.warn("Erreur de validation : {}", e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            logger.error("Erreur lors de la création de l'intervention", e);  // LOG COMPLET
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                 .body("Erreur interne : " + e.getMessage());
        }
    }



    // Obtenir toutes les interventions
    @GetMapping
    public ResponseEntity<List<Intervention>> getAllInterventions() {
        try {
            List<Intervention> list = interventionService.getAllInterventions();
            return list.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(list);
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération des interventions", e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Obtenir une intervention par ID
    @GetMapping("/{id}")
    public ResponseEntity<Intervention> getInterventionById(@PathVariable Long id) {
        try {
            Optional<Intervention> intervention = interventionService.getInterventionById(id);
            return intervention.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération de l'intervention ID: {}", id, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Obtenir une intervention par UUID
    @GetMapping("/uuid/{uuid}")
    public ResponseEntity<Intervention> getInterventionByUuid(@PathVariable UUID uuid) {
        try {
            Optional<Intervention> intervention = interventionService.getInterventionByUuid(uuid);
            return intervention.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération de l'intervention UUID: {}", uuid, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Supprimer une intervention
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteIntervention(@PathVariable ("id") Long id) {
        try {
            if (!interventionService.getInterventionById(id).isPresent()) {
                return ResponseEntity.notFound().build();
            }
            interventionService.deleteIntervention(id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            logger.error("Erreur lors de la suppression de l'intervention ID: {}", id, e);
            return ResponseEntity.internalServerError().build();
        }
    }

 // Modifier une intervention existante
    @PutMapping("/{id}")
    public ResponseEntity<Intervention> updateIntervention(@PathVariable ("id") Long id , @Valid @RequestBody Intervention updatedIntervention) {
        try {
            Optional<Intervention> existingIntervention = interventionService.getInterventionById(id);
            if (existingIntervention.isEmpty()) {
                return ResponseEntity.notFound().build();
            }

            
            updatedIntervention.setId(id);

            Intervention savedIntervention = interventionService.saveIntervention(updatedIntervention);
            return ResponseEntity.ok(savedIntervention);
        } catch (Exception e) {
            logger.error("Erreur lors de la mise à jour de l'intervention ID: {}", id, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Rechercher par technicien
    @GetMapping("/technicien/{technicianId}")
    public ResponseEntity<List<Intervention>> getByTechnician(@PathVariable Long technicianId) {
        try {
            List<Intervention> result = interventionService.getInterventionsByTechnicienId(technicianId);
            return result.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(result);
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération des interventions du technicien ID: {}", technicianId, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Rechercher par équipement
    @GetMapping("/equipement/{equipementId}")
    public ResponseEntity<List<Intervention>> getByEquipement(@PathVariable Long equipementId) {
        try {
            List<Intervention> result = interventionService.getInterventionsByEquipementId(equipementId);
            return result.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(result);
        } catch (Exception e) {
            logger.error("Erreur lors de la récupération des interventions pour l'équipement ID: {}", equipementId, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Rechercher par statut
    @GetMapping("/status/{status}")
    public ResponseEntity<List<Intervention>> getByStatus(@PathVariable String status) {
        try {
            List<Intervention> result = interventionService.getInterventionsByStatus(status);
            return result.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(result);
        } catch (IllegalArgumentException e) {
            logger.warn("Statut d’intervention invalide : {}", status);
            return ResponseEntity.badRequest().body(null);
        } catch (Exception e) {
            logger.error("Erreur lors de la recherche par statut: {}", status, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    // Rechercher par date (yyyy-MM-dd)
    @GetMapping("/date/{date}")
    public ResponseEntity<List<Intervention>> getByDate(@PathVariable String date) {
        try {
            LocalDate parsedDate = LocalDate.parse(date);
            List<Intervention> result = interventionService.getInterventionsByDate(parsedDate);
            return result.isEmpty() ? ResponseEntity.noContent().build() : ResponseEntity.ok(result);
        } catch (Exception e) {
            logger.error("Erreur lors de la recherche par date: {}", date, e);
            return ResponseEntity.badRequest().build();
        }
    }

    // Gérer les erreurs de validation
    @ExceptionHandler(BindException.class)
    public ResponseEntity<String> handleValidationExceptions(BindException ex) {
        StringBuilder errors = new StringBuilder("Erreurs de validation :\n");
        for (var error : ex.getFieldErrors()) {
            errors.append(error.getField())
                  .append(" : ")
                  .append(error.getDefaultMessage())
                  .append("\n");
        }
        logger.error(errors.toString());
        return ResponseEntity.badRequest().body(errors.toString());
    }

    // Gérer les erreurs générales
    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleGeneralException(Exception e) {
        logger.error("Erreur interne du serveur", e);
        return ResponseEntity.internalServerError()
                .body("Une erreur inattendue est survenue : " + e.getMessage());
    }
}
